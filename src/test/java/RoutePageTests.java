import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static io.qameta.allure.Allure.step;

public class RoutePageTests {

    @Test
    @DisplayName("Модальное окно для создания и редактирования маршрута")
    public void shouldOpenRoutesModalPageTest() {
        step("Открыть модальное окно для создания и редактирования маршрута", () -> {});
        step("Убедиться, что модальное окно выглядит в соответствии с дизайном", () -> {});
        // Как вариант, можно написать скриншотный тест для проверки верстки
    }

    @Test
    @DisplayName("Поиск по названию города")
    public void shouldSearchByCitiesTest() {
        step("Открыть модальное окно для создания и редактирования маршрута, перейдя по URL", () -> {});
        step("Ввести в поисковой строке название города 'Ижевск'", () -> {});
        step("Убедиться, что в результатах поиска отображается чек-бокс для города 'Ижевск'", () -> {});
    }

    @Test
    @DisplayName("Поиск по названию ПВЗ")
    public void shouldSearchByDeliveryPointTest() {
        step("Открыть модальное окно для создания и редактирования маршрута, перейдя по URL", () -> {});
        step("Ввести в поисковой строке название ПВЗ 'КЗН-12'", () -> {});
        step("Убедиться, что в результатах поиска отображается чек-бокс для города 'Казань' и ПВЗ 'КЗН-12'", () -> {});
    }

    @Test
    @DisplayName("Блок с названиями городов")
    public void citiesBlockTest()  {
        //Такое название метода ок? Мне показалось, что вполне
        step("Открыть модальное окно для создания и редактирования маршрута, перейдя по URL", () -> {});
        step("Отметить чек-бокс с названием города Казань", () -> {});
        step("Убедиться, что в правой части модального окна появился список ПВЗ в городе Казань", () -> {});
        step("Убедиться, что чек-бокс невыбранного города с названием Иннополис белый и активный", () -> {});
        step("Нажать на неактивный чек-бокс города", () -> {});
        step("Убедиться, что ничего не происходит", () -> {});
        //Какие действия можно выполнить, чтобы убедиться, что ничего не происходит? Состояние чек-бокса не меняется, такого рода проверка?
        step("Нажать на неактивный чек-бокс ПВЗ", () -> {});
        step("Убедиться, что ничего не происходит", () -> {});
    }

    @Test
    @DisplayName("Выбор чек-боксов в блоке со списком ПВЗ")
    public void shouldSelectItemsOfDeliveryPointsTest () {
        step("Открыть модальное окно для создания и редактирования маршрута, перейдя по URL", () -> {});
        step("Отметить чек-бокс с названием города Йошкар-Ола", () -> {});
        step("Убедиться, что в правой части модального окна появился список ПВЗ в городе Йошкар-Ола", () -> {
        });
        step("Выбрать первый ПВЗ из отобразившегося списка", () -> {});
        step("Убедиться, что чек-бокс города Йошкар-Ола, ПВЗ которого выбраны частично, красный с белой горизонтальной полоской", () -> {});
        // По моему мнению, 5 и 6 пункт чек-листа дублируют друг друга, поэтому я их объединила
        step("Нажать на чек-бокс с белой полоской в блоке выбора ПВЗ", () -> {});
        step("Убедиться, что происходит довыбор всех не выбранных ПВЗ со всеми типами доставки в городе Йошкар-Ола", () -> {});
    }

    @Test
    @DisplayName("Выбор всех значений списка ПВЗ")
    public void shouldSelectAllItemsOfDeliveryPointsTest() {
        step("Открыть модальное окно для создания и редактирования маршрута, перейдя по URL", () -> {});
        step("Отметить чек-бокс с названием города Казань", () -> {});
        step("Убедиться, что в правой части модального окна появился список ПВЗ в городе Казань", () -> {});
        // Первые три шага можно объединить в один в качестве предусловия или заменить на другой город, и/или в будущем вынести с аннотацией @BeforeEach в отдельный блок
        step("Нажать на полностью белый чек-бокс в блоке выбора ПВЗ", () -> {});
        step("Убедиться, что происходит выбор всех ПВЗ города со всеми типами доставки", () -> {
        });
    }

    @Test
    @DisplayName("Отмена выбранных значений списка ПВЗ")
    public void shouldDeselectAllItemsOfDeliveryPointsTest () {
        step("Открыть модальное окно для создания и редактирования маршрута, перейдя по URL", () -> {});
        step("Отметить чек-бокс с названием города Казань", () -> {});
        step("Убедиться, что в правой части модального окна появился список ПВЗ в городе Казань", () -> {
        });
        step("Нажать на полностью белый чек-бокс в блоке выбора ПВЗ", () -> {
        });
        step("Убедиться, что происходит выбор всех ПВЗ города со всеми типами доставки", () -> {
        });
        // Возможно, выбор всех значений ПВЗ (предыдущий тест) и их отмену можно было вложить в один тест (как лучше?); пока решила разбить на два
        step("Нажать на чек-бокс с белой галочкой в блоке выбора ПВЗ", () -> {
        });
        step("Убедиться, что происходит отмена выбора всех ПВЗ со всеми типами доставки", () -> {
        });
    }

    @Test
    @DisplayName("Отображение текстовой подсказки в блоке ПВЗ")
    public void shouldOpenTooltipInDeliveryPointsBlockTest () {
        step("Открыть модальное окно для создания и редактирования маршрута, перейдя по URL", () -> {});
        step("Отметить чек-бокс с названием города Казань", () -> {});
        step("Убедиться, что в правой части модального окна появился список ПВЗ в городе Казань", () -> {
        });
        // Первые три шага можно объединить в один в качестве предусловия или заменить на другой город, и/или в будущем вынести с аннотацией @BeforeEach в отдельный блок
        step("В блоке с названиями ПВЗ нажать на знак вопроса", () -> {});
        step("Проверить, что появляется текстовая подсказка", () -> {});
    }

    @Test
    @DisplayName("Привязывание ПВЗ к маршруту")
    public void shouldLinkDeliveryPointToRouteTest () {
        step("Открыть модальное окно для создания и редактирования маршрута, перейдя по URL", () -> {});
        step("Отметить чек-бокс с названием города Казань", () -> {});
        step("Убедиться, что в правой части модального окна появился список ПВЗ в городе Казань", () -> {});
        // Первые три шага можно объединить в один в качестве предусловия или заменить на другой город, и/или в будущем вынести с аннотацией @BeforeEach в отдельный блок
        step("Выбрать название ПВЗ 'КЗН-12'", () -> {});
        step("Привязать выбранный ПВЗ к предложенному маршруту", () -> {});
        step("Проверить, что в блоке с ПВЗ для ПВЗ 'КЗН-12' в чек-боксе выводится номер маршрута, к которому он привязан", () -> {});
    }

    @Test
    @DisplayName("Безуспешное сохранение изменений в модальном окне создания и редактирования маршрута")
    public void shouldNotSaveChangesTest () {
       step("Открыть модальное окно для создания и редактирования маршрута, перейдя по URL", () -> {});
       step("Создать новый маршрут", () -> {});
       //Выполнить действия в модалке: создать новый маршрут или отредактировать существующий, как вариант
       step("Нажать на область вне модального окна или на крестик", () -> {});
       //Тут просятся две отдельные проверки на клик вне модалки и нажатие на крестик; оставила так, чтобы не дублировать тест/шаги
       step("Проверить, что появляется предупреждение о том, что изменения не будут сохранены", () -> {});
       step("Нажать на кнопку с текстом 'Нет'", () -> {});
       step("Убедиться, что модальное окно осталось открытым", () -> {});
       step("Нажать на кнопку с текстом 'Да'", () -> {});
       step("Убедиться, что модальное окно закрылось, изменения не сохранились", () -> {});
    }

    @Test
    @DisplayName("Успешное сохранение изменений в модальном окне создания и редактирования маршрута")
    public void shouldSaveChangesTest () {
        step("Открыть модальное окно для создания и редактирования маршрута, перейдя по URL", () -> {});
        step("Создать новый маршрут", () -> {});
        //Выполнить действия в модалке: создать новый маршрут или отредактировать существующий, как вариант
        step("Нажать на кнопку с текстом 'Сохранить'", () -> {});
        step("Убедиться, что модальное окно закрылось, изменения сохранились", () -> {});
    }
}
